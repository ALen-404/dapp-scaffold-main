[{"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\AppBar.tsx":"1","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\ContentContainer.tsx":"2","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\Footer.tsx":"3","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\nav-element\\index.tsx":"4","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\NetworkSwitcher.tsx":"5","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\Notification.tsx":"6","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\RequestMint.tsx":"7","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\SendTransaction.tsx":"8","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\SendVersionedTransaction.tsx":"9","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\SignMessage.tsx":"10","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\Text\\index.tsx":"11","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\contexts\\AutoConnectProvider.tsx":"12","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\contexts\\ContextProvider.tsx":"13","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\contexts\\NetworkConfigurationProvider.tsx":"14","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\hooks\\useQueryContext.tsx":"15","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\models\\types.ts":"16","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\pages\\api\\hello.ts":"17","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\pages\\basics.tsx":"18","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\pages\\index.tsx":"19","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\pages\\_app.tsx":"20","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\pages\\_document.tsx":"21","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\stores\\useNotificationStore.tsx":"22","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\stores\\useUserSOLBalanceStore.tsx":"23","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\utils\\explorer.ts":"24","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\utils\\index.tsx":"25","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\utils\\notifications.tsx":"26","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\views\\basics\\index.tsx":"27","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\views\\home\\index.tsx":"28","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\views\\index.tsx":"29","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\RequestMint-mint.tsx":"30","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\RequestMint-transfer.tsx":"31","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\views\\home\\index-mint.tsx":"32","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\views\\home\\index-transfer.tsx":"33"},{"size":4083,"mtime":1703040150291,"results":"34","hashOfConfig":"35"},{"size":1252,"mtime":1702826822563,"results":"36","hashOfConfig":"35"},{"size":10808,"mtime":1702826822584,"results":"37","hashOfConfig":"35"},{"size":1705,"mtime":1702826822837,"results":"38","hashOfConfig":"35"},{"size":822,"mtime":1702826822606,"results":"39","hashOfConfig":"35"},{"size":4399,"mtime":1702826822625,"results":"40","hashOfConfig":"35"},{"size":2764,"mtime":1703000143864,"results":"41","hashOfConfig":"35"},{"size":3468,"mtime":1702826822669,"results":"42","hashOfConfig":"35"},{"size":3425,"mtime":1702826822699,"results":"43","hashOfConfig":"35"},{"size":2470,"mtime":1702826822733,"results":"44","hashOfConfig":"35"},{"size":1558,"mtime":1702826822778,"results":"45","hashOfConfig":"35"},{"size":962,"mtime":1702826822881,"results":"46","hashOfConfig":"35"},{"size":2327,"mtime":1702826822906,"results":"47","hashOfConfig":"35"},{"size":892,"mtime":1702826822933,"results":"48","hashOfConfig":"35"},{"size":566,"mtime":1702826822984,"results":"49","hashOfConfig":"35"},{"size":62,"mtime":1702826823046,"results":"50","hashOfConfig":"35"},{"size":307,"mtime":1702826823198,"results":"51","hashOfConfig":"35"},{"size":366,"mtime":1702998316684,"results":"52","hashOfConfig":"35"},{"size":358,"mtime":1702998316683,"results":"53","hashOfConfig":"35"},{"size":889,"mtime":1702998319050,"results":"54","hashOfConfig":"35"},{"size":527,"mtime":1702826823113,"results":"55","hashOfConfig":"35"},{"size":420,"mtime":1702826823235,"results":"56","hashOfConfig":"35"},{"size":796,"mtime":1702826823254,"results":"57","hashOfConfig":"35"},{"size":741,"mtime":1702826823358,"results":"58","hashOfConfig":"35"},{"size":909,"mtime":1702826823380,"results":"59","hashOfConfig":"35"},{"size":461,"mtime":1702826823400,"results":"60","hashOfConfig":"35"},{"size":784,"mtime":1702826823471,"results":"61","hashOfConfig":"35"},{"size":2454,"mtime":1702999645204,"results":"62","hashOfConfig":"35"},{"size":74,"mtime":1702826823431,"results":"63","hashOfConfig":"35"},{"size":3205,"mtime":1702978497011,"results":"64","hashOfConfig":"35"},{"size":2764,"mtime":1703000149516,"results":"65","hashOfConfig":"35"},{"size":3495,"mtime":1702975318853,"results":"66","hashOfConfig":"35"},{"size":2454,"mtime":1703000156385,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6e3qh1",{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\AppBar.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\ContentContainer.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\Footer.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\nav-element\\index.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\NetworkSwitcher.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\Notification.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\RequestMint.tsx",["141","142","143"],"import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL, TransactionSignature, PublicKey, Keypair,Connection } from '@solana/web3.js';\nimport { FC, useCallback, useMemo } from 'react';\nimport { notify } from \"../utils/notifications\";\nimport useUserSOLBalanceStore from '../stores/useUserSOLBalanceStore';\nimport s from './RequestAirdrop.module.css'\nimport * as anchor from \"@project-serum/anchor\"\nimport idl from './transfer.json';\nimport * as splToken from \"@solana/spl-token\";\nimport axios from 'axios';\n\n\nexport const RequestAirdrop: FC = () => {\n  // const { connection } = useConnection();\n  const wallet = useWallet();\n  const { getUserSOLBalance } = useUserSOLBalanceStore();\n  const programID = new PublicKey(idl.metadata.address);\n\n  const connection = new Connection(\"https://clean-solitary-wildflower.solana-mainnet.quiknode.pro/52f1d9f45e847af7f96c04ddf3b3ef2f7481ce3a/\");\n\n  const provider = useMemo(() => {\n    return new anchor.AnchorProvider(connection, wallet, {\n      commitment: \"processed\",\n    })\n  }, [connection, wallet])\n  const program = useMemo(() => {\n    return new anchor.Program(idl as any, programID, provider)\n  }, [programID, provider])\n\n\n\n  const onClick = useCallback(async () => {\n    if (!wallet.publicKey) {\n      console.log('error', 'Wallet not connected!');\n      notify({ type: 'error', message: 'error', description: 'Wallet not connected!' });\n      return;\n    }\n\n    let signature: TransactionSignature = '';\n    try {\n      // transfer\n      signature = await program.methods\n        .transferSol()\n        .accounts({\n          user: wallet.publicKey,\n          recipient: new PublicKey('9UgMeYVrWrG5fbjkHos4FShJfchUkXZgNo2CV68h8Mjq'),\n        })\n        .rpc();\n      console.log(\" transaction signature\", signature);\n\n      let latestBlockhash = await connection.getLatestBlockhash()\n      await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed');\n     const a =  await axios.post(`https://nft.koalago.io/nft/addList/${wallet.publicKey.toBase58()}`,)\n        console.log(a.data,'{wallet.publicKey');\n        \n      notify({ type: 'success', message: 'Mint successful!', txid: signature });\n\n      getUserSOLBalance(wallet.publicKey, connection);\n    } catch (error: any) {\n      notify({ type: 'error', message: `Mint failed!`, description: error?.message, txid: signature });\n      console.log('error', `Mint failed! ${error?.message}`, signature);\n    }\n  }, [wallet.publicKey, program.methods, connection, getUserSOLBalance]);\n\n\n\n  return (\n\n    <div className=\"flex flex-row justify-center \">\n      <button\n        className={s.transferBtn}\n        onClick={onClick}\n      >\n        <span>MINT </span>\n      </button>\n    </div>\n\n\n  );\n};\n\n","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\SendTransaction.tsx",["144"],"import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, Transaction, TransactionMessage, TransactionSignature, VersionedTransaction } from '@solana/web3.js';\nimport { FC, useCallback } from 'react';\nimport { notify } from \"../utils/notifications\";\n\nexport const SendTransaction: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify({ type: 'error', message: `Wallet not connected!` });\n            console.log('error', `Send Transaction: Wallet not connected!`);\n            return;\n        }\n\n        let signature: TransactionSignature = '';\n        try {\n\n            // Create instructions to send, in this case a simple transfer\n            const instructions = [\n                SystemProgram.transfer({\n                    fromPubkey: publicKey,\n                    toPubkey: Keypair.generate().publicKey,\n                    lamports: 1_000_000,\n                }),\n            ];\n\n            // Get the lates block hash to use on our transaction and confirmation\n            let latestBlockhash = await connection.getLatestBlockhash()\n\n            // Create a new TransactionMessage with version and compile it to legacy\n            const messageLegacy = new TransactionMessage({\n                payerKey: publicKey,\n                recentBlockhash: latestBlockhash.blockhash,\n                instructions,\n            }).compileToLegacyMessage();\n\n            // Create a new VersionedTransacction which supports legacy and v0\n            const transation = new VersionedTransaction(messageLegacy)\n\n            // Send transaction and await for signature\n            signature = await sendTransaction(transation, connection);\n\n            // Send transaction and await for signature\n            await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed');\n\n            console.log(signature);\n            notify({ type: 'success', message: 'Transaction successful!', txid: signature });\n        } catch (error: any) {\n            notify({ type: 'error', message: `Transaction failed!`, description: error?.message, txid: signature });\n            console.log('error', `Transaction failed! ${error?.message}`, signature);\n            return;\n        }\n    }, [publicKey, notify, connection, sendTransaction]);\n\n    return (\n        <div className=\"flex flex-row justify-center\">\n            <div className=\"relative group items-center\">\n                <div className=\"m-1 absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-fuchsia-500 \n                rounded-lg blur opacity-20 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-tilt\"></div>\n                    <button\n                        className=\"group w-60 m-2 btn animate-pulse bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black\"\n                        onClick={onClick} disabled={!publicKey}\n                    >\n                        <div className=\"hidden group-disabled:block \">\n                        Wallet not connected\n                        </div>\n                         <span className=\"block group-disabled:hidden\" >\n                            Send Transaction\n                        </span>\n                    </button>\n             </div>\n        </div>\n    );\n};\n","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\SendVersionedTransaction.tsx",["145"],"import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { Keypair, SystemProgram, TransactionMessage, TransactionSignature, VersionedTransaction } from '@solana/web3.js';\nimport { FC, useCallback } from 'react';\nimport { notify } from \"../utils/notifications\";\n\nexport const SendVersionedTransaction: FC = () => {\n    const { connection } = useConnection();\n    const { publicKey, sendTransaction } = useWallet();\n\n    const onClick = useCallback(async () => {\n        if (!publicKey) {\n            notify({ type: 'error', message: `Wallet not connected!` });\n            console.log('error', `Send Transaction: Wallet not connected!`);\n            return;\n        }\n\n        let signature: TransactionSignature = '';\n        try {\n\n            // Create instructions to send, in this case a simple transfer\n            const instructions = [\n                SystemProgram.transfer({\n                    fromPubkey: publicKey,\n                    toPubkey: Keypair.generate().publicKey,\n                    lamports: 1_000_000,\n                }),\n            ];\n\n            // Get the lates block hash to use on our transaction and confirmation\n            let latestBlockhash = await connection.getLatestBlockhash()\n\n            // Create a new TransactionMessage with version and compile it to version 0\n            const messageV0 = new TransactionMessage({\n                payerKey: publicKey,\n                recentBlockhash: latestBlockhash.blockhash,\n                instructions,\n            }).compileToV0Message();\n\n            // Create a new VersionedTransacction to support the v0 message\n            const transation = new VersionedTransaction(messageV0)\n\n            // Send transaction and await for signature\n            signature = await sendTransaction(transation, connection);\n\n            // Await for confirmation\n            await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed');\n\n            console.log(signature);\n            notify({ type: 'success', message: 'Transaction successful!', txid: signature });\n        } catch (error: any) {\n            notify({ type: 'error', message: `Transaction failed!`, description: error?.message, txid: signature });\n            console.log('error', `Transaction failed! ${error?.message}`, signature);\n            return;\n        }\n    }, [publicKey, notify, connection, sendTransaction]);\n\n    return (\n        <div className=\"flex flex-row justify-center\">\n            <div className=\"relative group items-center\">\n                <div className=\"m-1 absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-fuchsia-500 \n                rounded-lg blur opacity-20 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-tilt\"></div>\n                    <button\n                        className=\"group w-60 m-2 btn animate-pulse bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black\"\n                        onClick={onClick} disabled={!publicKey}\n                        >\n                    <div className=\"hidden group-disabled:block \">\n                        Wallet not connected\n                    </div>\n                    <span className=\"block group-disabled:hidden\" >\n                        Send Versioned Transaction\n                    </span>\n                    </button>\n            </div>\n        </div>\n    );\n};","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\SignMessage.tsx",["146"],"// TODO: SignMessage\nimport { verify } from '@noble/ed25519';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport bs58 from 'bs58';\nimport { FC, useCallback } from 'react';\nimport { notify } from \"../utils/notifications\";\n\nexport const SignMessage: FC = () => {\n    const { publicKey, signMessage } = useWallet();\n\n    const onClick = useCallback(async () => {\n        try {\n            // `publicKey` will be null if the wallet isn't connected\n            if (!publicKey) throw new Error('Wallet not connected!');\n            // `signMessage` will be undefined if the wallet doesn't support it\n            if (!signMessage) throw new Error('Wallet does not support message signing!');\n            // Encode anything as bytes\n            const message = new TextEncoder().encode('Hello, world!');\n            // Sign the bytes using the wallet\n            const signature = await signMessage(message);\n            // Verify that the bytes were signed using the private key that matches the known public key\n            if (!verify(signature, message, publicKey.toBytes())) throw new Error('Invalid signature!');\n            notify({ type: 'success', message: 'Sign message successful!', txid: bs58.encode(signature) });\n        } catch (error: any) {\n            notify({ type: 'error', message: `Sign Message failed!`, description: error?.message });\n            console.log('error', `Sign Message failed! ${error?.message}`);\n        }\n    }, [publicKey, notify, signMessage]);\n\n    return (\n        <div className=\"flex flex-row justify-center\">\n            <div className=\"relative group items-center\">\n                <div className=\"m-1 absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-fuchsia-500 \n                rounded-lg blur opacity-20 group-hover:opacity-100 transition duration-1000 group-hover:duration-200 animate-tilt\"></div>\n                <button\n                    className=\"group w-60 m-2 btn animate-pulse bg-gradient-to-br from-indigo-500 to-fuchsia-500 hover:from-white hover:to-purple-300 text-black\"\n                    onClick={onClick} disabled={!publicKey}\n                >\n                    <div className=\"hidden group-disabled:block\">\n                        Wallet not connected\n                    </div>\n                    <span className=\"block group-disabled:hidden\" > \n                        Sign Message \n                    </span>\n                </button>\n            </div>\n        </div>\n    );\n};\n","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\Text\\index.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\contexts\\AutoConnectProvider.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\contexts\\ContextProvider.tsx",["147"],"import { WalletAdapterNetwork, WalletError } from '@solana/wallet-adapter-base';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport {\n    UnsafeBurnerWalletAdapter\n} from '@solana/wallet-adapter-wallets';\nimport { Cluster, clusterApiUrl } from '@solana/web3.js';\nimport { FC, ReactNode, useCallback, useMemo } from 'react';\nimport { AutoConnectProvider, useAutoConnect } from './AutoConnectProvider';\nimport { notify } from \"../utils/notifications\";\nimport { NetworkConfigurationProvider, useNetworkConfiguration } from './NetworkConfigurationProvider';\nimport dynamic from \"next/dynamic\";\n\nconst ReactUIWalletModalProviderDynamic = dynamic(\n  async () =>\n    (await import(\"@solana/wallet-adapter-react-ui\")).WalletModalProvider,\n  { ssr: false }\n);\n\nconst WalletContextProvider: FC<{ children: ReactNode }> = ({ children }) => {\n    const { autoConnect } = useAutoConnect();\n    const { networkConfiguration } = useNetworkConfiguration();\n    const network = networkConfiguration as WalletAdapterNetwork;\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n\n    console.log(network);\n\n    const wallets = useMemo(\n        () => [\n            new UnsafeBurnerWalletAdapter(),\n        ],\n        [network]\n    );\n\n    const onError = useCallback(\n        (error: WalletError) => {\n            notify({ type: 'error', message: error.message ? `${error.name}: ${error.message}` : error.name });\n            console.error(error);\n        },\n        []\n    );\n\n    return (\n        // TODO: updates needed for updating and referencing endpoint: wallet adapter rework\n        <ConnectionProvider endpoint={endpoint}>\n            <WalletProvider wallets={wallets} onError={onError} autoConnect={autoConnect}>\n                <ReactUIWalletModalProviderDynamic>\n                    {children}\n                </ReactUIWalletModalProviderDynamic>\n\t\t\t</WalletProvider>\n        </ConnectionProvider>\n    );\n};\n\nexport const ContextProvider: FC<{ children: ReactNode }> = ({ children }) => {\n    return (\n        <>\n            <NetworkConfigurationProvider>\n                <AutoConnectProvider>\n                    <WalletContextProvider>{children}</WalletContextProvider>\n                </AutoConnectProvider>\n            </NetworkConfigurationProvider>\n        </>\n    );\n};\n","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\contexts\\NetworkConfigurationProvider.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\hooks\\useQueryContext.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\models\\types.ts",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\pages\\api\\hello.ts",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\pages\\basics.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\pages\\index.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\pages\\_app.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\pages\\_document.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\stores\\useNotificationStore.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\stores\\useUserSOLBalanceStore.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\utils\\explorer.ts",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\utils\\index.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\utils\\notifications.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\views\\basics\\index.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\views\\home\\index.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\views\\index.tsx",[],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\RequestMint-mint.tsx",["148","149"],"import { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport { LAMPORTS_PER_SOL, TransactionSignature, PublicKey, Keypair } from '@solana/web3.js';\nimport { FC, useCallback, useMemo } from 'react';\nimport { notify } from \"../utils/notifications\";\nimport useUserSOLBalanceStore from '../stores/useUserSOLBalanceStore';\nimport s from './RequestAirdrop.module.css'\nimport * as anchor from \"@project-serum/anchor\"\nimport idl from './idl.json';\nimport * as splToken from \"@solana/spl-token\";\n\n\nexport const RequestAirdrop: FC = () => {\n  const { connection } = useConnection();\n  const wallet = useWallet();\n  const { getUserSOLBalance } = useUserSOLBalanceStore();\n  const programID = new PublicKey(idl.metadata.address);\n\n\n  const provider = useMemo(() => {\n    return new anchor.AnchorProvider(connection, wallet, {\n      commitment: \"processed\",\n    })\n  }, [connection, wallet])\n  const program = useMemo(() => {\n    return new anchor.Program(idl as any, programID, provider)\n  }, [programID, provider])\n\n\n  const mintAccount = new PublicKey(\"8MZacwbpKNaP6W2CycLFefvMVmheVoeNb5eiybqamag6\");\n\n  const onClick = useCallback(async () => {\n    if (!wallet.publicKey) {\n      console.log('error', 'Wallet not connected!');\n      notify({ type: 'error', message: 'error', description: 'Wallet not connected!' });\n      return;\n    }\n\n    let signature: TransactionSignature = '';\n\n\n    const spenderAuthourity = PublicKey.findProgramAddressSync(\n      [\n        mintAccount.toBuffer(),\n        Buffer.from(\"authority\")\n      ],\n      programID\n    )[0];\n\n\n\n    const user = new Keypair();\n    const recipient = new Keypair();\n    const userTokenAccount = splToken.getAssociatedTokenAddressSync(\n      mintAccount,\n      wallet.publicKey\n    );\n\n    const ownerTokenAccount = splToken.getAssociatedTokenAddressSync(\n      mintAccount,\n      new PublicKey('GFN7iQnMec2G5eGG5FiK9CemZvXdebCME8g7h3k7UTs3')\n    )\n\n    try {\n\n      // mint\n      signature = await program.methods\n        .mintNft()\n        .accounts({\n          user: wallet.publicKey,\n          from: new PublicKey('GFN7iQnMec2G5eGG5FiK9CemZvXdebCME8g7h3k7UTs3'),\n          recipient: new PublicKey('CKwDnkcEhv2DEt7U1FWBoWMYfnVPvV2pjguYgZr7rW9E'),\n          mintAccount,\n          userTokenAccount,\n          fromTokenAccount: ownerTokenAccount,\n          spenderAuthourity,\n        })\n        .rpc();\n      console.log(\" transaction signature\", signature);\n\n      let latestBlockhash = await connection.getLatestBlockhash()\n      await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed');\n\n      notify({ type: 'success', message: 'Mint successful!', txid: signature });\n\n      getUserSOLBalance(wallet.publicKey, connection);\n    } catch (error: any) {\n      notify({ type: 'error', message: `Mint failed!`, description: error?.message, txid: signature });\n      console.log('error', `Mint failed! ${error?.message}`, signature);\n    }\n  }, [wallet.publicKey, connection, getUserSOLBalance]);\n\n\n\n  return (\n\n    <div className=\"flex flex-row justify-center\">\n      <button\n        className={s.mintBtn}\n        onClick={onClick}\n      >\n        <span>MINT </span>\n      </button>\n    </div>\n\n\n  );\n};\n\n","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\components\\RequestMint-transfer.tsx",["150","151","152"],"C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\views\\home\\index-mint.tsx",["153","154","155"],"// Next, React\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport Link from 'next/link';\n\n// Wallet\nimport { useWallet, useConnection } from '@solana/wallet-adapter-react';\n\n// Components\nimport { RequestAirdrop } from '../../components/RequestMint';\nimport pkg from '../../../package.json';\n\n// Store\nimport useUserSOLBalanceStore from '../../stores/useUserSOLBalanceStore';\n\nimport Image from 'next/image';\nimport s from './home.module.css'\nimport { PublicKey } from '@solana/web3.js';\nimport axios from 'axios';\nimport { notify } from 'utils/notifications';\n\nexport const HomeView: FC = ({ }) => {\n  const wallet = useWallet();\n  const { connection } = useConnection();\n  const nftMintPublicKey = new PublicKey(\"8MZacwbpKNaP6W2CycLFefvMVmheVoeNb5eiybqamag6\");\n  const nftWalletPublicKey = new PublicKey(\"GFN7iQnMec2G5eGG5FiK9CemZvXdebCME8g7h3k7UTs3\");\n  const balance = useUserSOLBalanceStore((s) => s.balance)\n  const { getUserSOLBalance } = useUserSOLBalanceStore()\n  const [nftBalance, setNftBalance] = useState(10000)\n\n  const getNFTBalance = useCallback(async () => {\n    try {\n      const tokenAccountInfo = await connection.getParsedTokenAccountsByOwner(nftWalletPublicKey, {\n        mint: nftMintPublicKey,\n      });\n\n      if (tokenAccountInfo && tokenAccountInfo.value && tokenAccountInfo.value.length > 0) {\n        const nftBalance = tokenAccountInfo.value[0].account.data.parsed.info.tokenAmount.uiAmount;\n        console.log('NFT Balance:', nftBalance);\n        setNftBalance(nftBalance);\n      } else {\n        console.log('No NFT balance found for this wallet.');\n      }\n    } catch (error) {\n      console.error('Error fetching NFT balance:', error);\n    }\n  }, [nftWalletPublicKey, nftMintPublicKey, connection]);\n\n\n  useEffect(() => {\n    if (wallet.publicKey) {\n      getUserSOLBalance(wallet.publicKey, connection)\n    }\n  }, [wallet.publicKey, connection, getUserSOLBalance, getNFTBalance])\n  useEffect(() => {\n    getNFTBalance()\n\n  }, [])\n\n  return (\n\n    <div className=\"md:hero mx-auto p-4 \">\n      <div className=\"md:hero-content flex flex-col\">\n        <div className='mt-6'>\n          <h1 className=\"text-center color-white text-4xl  font-bold text-white mb-4\">\n            MINT\n          </h1>\n        </div>\n        <h4 className=\"md:w-full color-white  md:text-md text-center text-slate-200 my-2\">\n          <p>SPL-20</p>\n          <p className='text-slate-400 leading-relaxed'>Mints an NFT and Inscribes a txt file</p>\n        </h4>\n        <div className={s.indexBg}>\n\n          <div\n            className={s.indexBgImage}\n          >\n            <Image\n              src=\"/index.svg\"\n              alt=\"solana icon\"\n              width={750}\n              height={96}\n            />\n          </div>\n          <div className={s.nftMintBox}>\n            <div className={s.nftImg}>\n              <Image\n                src=\"/nft.svg\"\n                alt=\"solana icon\"\n                width={156}\n                height={156}\n              />\n            </div>\n            <p className={s.nftInfo}>\n              Tokens: 21,000,000\n            </p>\n            <p className={s.nftInfo}>\n              Tokens per mint: 1,000\n            </p>\n            <p className={s.nftInfo}>\n              MInt price: 0.03 sol\n            </p>\n            <p className={s.nftInfo}>\n              Supply minted: {10000 - nftBalance} / 10000\n            </p>\n            <RequestAirdrop />\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n};\n","C:\\Users\\alen\\Desktop\\project\\dapp-scaffold-main\\src\\views\\home\\index-transfer.tsx",[],{"ruleId":"156","severity":1,"message":"157","line":17,"column":9,"nodeType":"158","endLine":17,"endColumn":56},{"ruleId":"156","severity":1,"message":"159","line":19,"column":9,"nodeType":"158","endLine":19,"endColumn":143},{"ruleId":"156","severity":1,"message":"160","line":19,"column":9,"nodeType":"158","endLine":19,"endColumn":143},{"ruleId":"156","severity":1,"message":"161","line":55,"column":8,"nodeType":"162","endLine":55,"endColumn":56,"suggestions":"163"},{"ruleId":"156","severity":1,"message":"161","line":55,"column":8,"nodeType":"162","endLine":55,"endColumn":56,"suggestions":"164"},{"ruleId":"156","severity":1,"message":"161","line":28,"column":8,"nodeType":"162","endLine":28,"endColumn":40,"suggestions":"165"},{"ruleId":"156","severity":1,"message":"166","line":31,"column":9,"nodeType":"162","endLine":31,"endColumn":18,"suggestions":"167"},{"ruleId":"156","severity":1,"message":"168","line":16,"column":9,"nodeType":"158","endLine":16,"endColumn":56},{"ruleId":"156","severity":1,"message":"169","line":90,"column":6,"nodeType":"162","endLine":90,"endColumn":55,"suggestions":"170"},{"ruleId":"156","severity":1,"message":"157","line":17,"column":9,"nodeType":"158","endLine":17,"endColumn":56},{"ruleId":"156","severity":1,"message":"159","line":19,"column":9,"nodeType":"158","endLine":19,"endColumn":143},{"ruleId":"156","severity":1,"message":"160","line":19,"column":9,"nodeType":"158","endLine":19,"endColumn":143},{"ruleId":"156","severity":1,"message":"171","line":24,"column":9,"nodeType":"158","endLine":24,"endColumn":89},{"ruleId":"156","severity":1,"message":"172","line":25,"column":9,"nodeType":"158","endLine":25,"endColumn":91},{"ruleId":"156","severity":1,"message":"173","line":57,"column":6,"nodeType":"162","endLine":57,"endColumn":8,"suggestions":"174"},"react-hooks/exhaustive-deps","The 'programID' object construction makes the dependencies of useMemo Hook (at line 28) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'programID' in its own useMemo() Hook.","VariableDeclarator","The 'connection' object construction makes the dependencies of useMemo Hook (at line 25) change on every render. To fix this, wrap the initialization of 'connection' in its own useMemo() Hook.","The 'connection' object construction makes the dependencies of useCallback Hook (at line 63) change on every render. To fix this, wrap the initialization of 'connection' in its own useMemo() Hook.","React Hook useCallback has an unnecessary dependency: 'notify'. Either exclude it or remove the dependency array. Outer scope values like 'notify' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["175"],["176"],["177"],"React Hook useMemo has an unnecessary dependency: 'network'. Either exclude it or remove the dependency array.",["178"],"The 'programID' object construction makes the dependencies of useMemo Hook (at line 26) change on every render. To fix this, wrap the initialization of 'programID' in its own useMemo() Hook.","React Hook useCallback has missing dependencies: 'mintAccount', 'program.methods', and 'programID'. Either include them or remove the dependency array.",["179"],"The 'nftMintPublicKey' object construction makes the dependencies of useCallback Hook (at line 46) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'nftMintPublicKey' in its own useMemo() Hook.","The 'nftWalletPublicKey' object construction makes the dependencies of useCallback Hook (at line 46) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'nftWalletPublicKey' in its own useMemo() Hook.","React Hook useEffect has a missing dependency: 'getNFTBalance'. Either include it or remove the dependency array.",["180"],{"desc":"181","fix":"182"},{"desc":"181","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},"Update the dependencies array to be: [publicKey, connection, sendTransaction]",{"range":"192","text":"193"},{"range":"194","text":"193"},"Update the dependencies array to be: [publicKey, signMessage]",{"range":"195","text":"196"},"Update the dependencies array to be: []",{"range":"197","text":"198"},"Update the dependencies array to be: [wallet.publicKey, mintAccount, programID, program.methods, connection, getUserSOLBalance]",{"range":"199","text":"200"},"Update the dependencies array to be: [getNFTBalance]",{"range":"201","text":"202"},[2395,2443],"[publicKey, connection, sendTransaction]",[2361,2409],[1458,1490],"[publicKey, signMessage]",[1254,1263],"[]",[2944,2993],"[wallet.publicKey, mintAccount, programID, program.methods, connection, getUserSOLBalance]",[1981,1983],"[getNFTBalance]"]